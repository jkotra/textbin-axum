//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

use async_graphql::Object;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use utoipa::{IntoParams, ToSchema};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize, Eq, IntoParams, ToSchema,
)]
#[sea_orm(table_name = "paste")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub date: i64,
    #[sea_orm(unique)]
    pub uuid: Uuid,
    pub title: String,
    pub text: String,
    pub deletekey: String,
}

#[derive(IntoParams, ToSchema)]
pub struct PasteRequestResponse {
    pub id: i64,
    pub date: i64,
    pub uuid: String,
    pub title: String,
    pub text: String,
}

#[derive(IntoParams, ToSchema)]
pub struct PasteCreationResponse {
    pub id: i64,
    pub date: i64,
    pub uuid: String,
    pub title: String,
    pub text: String,
    pub deletekey: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

/* Request */

#[derive(Serialize, Deserialize, Debug, IntoParams, ToSchema)]
pub struct PasteRequest {
    pub title: String,
    pub text: String,
    pub captcha: String,
}

#[Object]
impl Model {
    async fn id(&self) -> i64 {
        self.id
    }

    async fn title(&self) -> &str {
        &self.title
    }

    async fn uuid(&self) -> String {
        self.uuid.to_string()
    }

    async fn text(&self) -> &str {
        &self.text
    }
}
